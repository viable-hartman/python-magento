# coding: utf-8

import simplejson as json
from os import path
from typing import Iterable
# Library used for Oauth v1 connection to OpenMage

try:
    from requests_oauthlib import OAuth1Session
    from requests import HTTPError
except ImportError:
    pass


class Client(object):

    def __init__(
            self, url, token_file, verify_ssl=True, useragent=None):

        if not path.exists(token_file):
            raise Exception("""For the Rest client "token_file" has to be a file path to a token file
            generated by the magento/token_gen.py OAuth v1 setup helper.
            """)

        with open(token_file) as tokfile:
            self._tokens = json.load(tokfile)

        self._url = url
        self._verify_ssl = verify_ssl
        self.useragent = useragent

    def call(self, resource_path, arguments, http_method='get',
             storeview=None, headers=None):
        url = '%s/%s' % (self._url, resource_path)
        if storeview:
            # https://github.com/magento/magento2/issues/3864
            url = url.replace('/rest/V1/', '/rest/%s/V1/' % storeview)

        oauth_session = OAuth1Session(
            self._tokens['client']['client_key'],
            client_secret=self._tokens['client']['client_secret'],
            resource_owner_key=self._tokens['access']['oauth_token'],
            resource_owner_secret=self._tokens['access']['oauth_token_secret'])

        function = getattr(oauth_session, http_method)

        base_headers = {'Cookie': 'country=set', }

        if self.useragent:
            base_headers.update({'User-Agent': self.useragent, })

        if headers:
            base_headers.update(headers)

        kwargs = {'headers': base_headers}

        if http_method == 'get':
            if isinstance(arguments, Iterable):
                if '_id' in arguments:  # Append the object ID to the REST URL if specified.
                    url = "{0}/{1}".format(url, arguments['_id'])

                if 'json' in arguments:  # Send the request json data.
                    kwargs['json'] = arguments['json']
                else:
                    kwargs['params'] = arguments
            else:
                url = "{0}/{1}".format(url, arguments)
        elif arguments is not None:
            if '_id' in arguments:  # Append the object ID to the REST URL if specified.
                url = "{0}/{1}".format(url, arguments['_id'])

            if 'json' in arguments:  # Send the request json data.
                kwargs['json'] = arguments['json']
            else:
                kwargs['json'] = arguments

        kwargs['verify'] = self._verify_ssl

        res = function(url, **kwargs)
        if (res.status_code == 400 and res._content):
            raise HTTPError(url, res.status_code, res._content, headers, __name__)
        res.raise_for_status()

        try:
            return res.json()
        except json.errors.JSONDecodeError:
            return { "status": res.status_code }
